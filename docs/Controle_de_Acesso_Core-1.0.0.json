{
  "swagger": "2.0",
  "info": {
    "description": "This is an API for Main Access Control Project. This project is an adapter for casbin (https://casbin.org/en/) a lib in go that helps us to work with domain RBAC. In these projects, we have three main concepts - users, policies and roles. Policies are rules that say that a role in a domain can take action on a resource.",
    "version": "1.0.0",
    "title": "Controle de Acesso Core API"
  },
  "host": "virtserver.swaggerhub.com",
  "basePath": "/ambetechv_ca_core/Controle_de_Acesso_Core/1.0.0",
  "schemes": [
    "https"
  ],
  "paths": {
    "/users/permissions": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Checks if a user has permission",
        "description": "Based on a domain, resource and action, checks if a user has permission",
        "operationId": "checkIfUserHasPermission",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "authenticationToken",
            "in": "header",
            "description": "Authentication Token from user",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "UriProjectDto",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UriProjectDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User has permission to access this domain resource and do the action that they want"
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "User don't have permission"
          },
          "500": {
            "description": "It was not possible validate the permission"
          }
        }
      }
    },
    "/users/{userName}/roles": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Gets all roles from this user in domain",
        "description": "Gets all roles from a specific user in a specific domain",
        "operationId": "getAllRolesFromUserInDomain",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userName",
            "in": "path",
            "description": "Name from user that will be get the new role",
            "required": true,
            "type": "string"
          },
          {
            "name": "domain",
            "in": "query",
            "description": "Domain name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get all roles from a specific user in a specific",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Invalid input, object invalid"
          },
          "500": {
            "description": "It was not possible to get the roles from this user"
          }
        }
      },
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Add a user-role-domain association",
        "description": "Creates a new user-role-domain association",
        "operationId": "addUserRoleDomainAssociation",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userName",
            "in": "path",
            "description": "Name from user that will be get the new role",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "UserRoleDomainAssociationDto",
            "description": "Dto that contains the role and domain information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserRoleDomainAssociationDto"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User-role-domain association created"
          },
          "400": {
            "description": "Invalid input, object invalid"
          },
          "500": {
            "description": "It was not possible to add the role to the user"
          }
        }
      },
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Updates the user-role-domain association with a new role",
        "description": "Updates just the role from a user in a domain in user-role-domain association",
        "operationId": "updateUserRoleDomainAssociation",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userName",
            "in": "path",
            "description": "Name of the user who will have the updated role",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "UserRoleDomainAssociationDto",
            "description": "Dto that contains the old role, new role and domain information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateUserRoleDomainAssociationDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User-role-domain association updated"
          },
          "400": {
            "description": "Invalid input, object invalid"
          },
          "500": {
            "description": "It was not possible to update the role from user"
          }
        }
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Deletes a user-role-domain association",
        "description": "Deletes a existing user-role-domain association",
        "operationId": "deleteUserRoleDomainAssociation",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userName",
            "in": "path",
            "description": "Name from user that will get the role deleted",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "UserRoleDomainAssociationDto",
            "description": "Dto that contains the role and domain information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserRoleDomainAssociationDto"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User-role-domain association deleted"
          },
          "400": {
            "description": "Invalid input, object invalid"
          },
          "500": {
            "description": "It was not possible to delete the role to the user"
          }
        }
      }
    },
    "/policies": {
      "post": {
        "tags": [
          "policies"
        ],
        "summary": "Creates a new role-domain-resource-action policy",
        "description": "Creates a new role-domain-resource-action association policy",
        "operationId": "addPolicy",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "RoleDomainResourceActionAssociationDto",
            "description": "Dto that contains the role, domain, resource and action information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RoleDomainResourceActionAssociationDto"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Role-Domain-Resource-Action association created"
          },
          "400": {
            "description": "Invalid input, object invalid"
          },
          "500": {
            "description": "This policy could not be created"
          }
        }
      },
      "put": {
        "tags": [
          "policies"
        ],
        "summary": "Updates a role-domain-resource-action policy",
        "description": "Updates a existing role-domain-resource-action association policy",
        "operationId": "UpdatePolicy",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "RoleDomainResourceActionAssociationDto",
            "description": "Dto that contains the old role, old domain, old resource, old action, new role, new domain, new resource and new action information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateRoleDomainResourceActionAssociationDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User-role-domain association updated"
          },
          "400": {
            "description": "Invalid input, object invalid"
          },
          "500": {
            "description": "This policy could not be updated"
          }
        }
      },
      "delete": {
        "tags": [
          "policies"
        ],
        "summary": "Deletes a role-domain-resource-action policy",
        "description": "Deletes a existing role-domain-resource-action association policy",
        "operationId": "deletePolicy",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "RoleDomainResourceActionAssociationDto",
            "description": "Dto that contains the role, domain, resource and action information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RoleDomainResourceActionAssociationDto"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Role-domain-resource-action association deleted"
          },
          "400": {
            "description": "Invalid input, object invalid"
          },
          "500": {
            "description": "It was not possible to delete the role to the user"
          }
        }
      }
    },
    "/roles/{roleName}/users": {
      "get": {
        "tags": [
          "roles"
        ],
        "summary": "Gets all users in a role",
        "description": "Gets all users in a role",
        "operationId": "getUsersInARole",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "roleName",
            "in": "path",
            "description": "Role name",
            "required": true,
            "type": "string"
          },
          {
            "name": "domain",
            "in": "query",
            "description": "Domain name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Gets all users in a role inside that domain",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Invalid input, object invalid"
          },
          "500": {
            "description": "It was not possible to get the roles from this user"
          }
        }
      }
    }
  },
  "definitions": {
    "UriProjectDto": {
      "required": [
        "uri"
      ],
      "properties": {
        "uri": {
          "type": "string",
          "example": "https://hercules.ambevdevs.com.br/nonprod/dev-hercules-frontendreverseproxy/precos/promocoes/list"
        }
      }
    },
    "UserRoleDomainAssociationDto": {
      "required": [
        "domain",
        "role"
      ],
      "properties": {
        "role": {
          "type": "string",
          "example": "cadastro_lider"
        },
        "domain": {
          "type": "string",
          "example": "administrativo"
        }
      }
    },
    "UpdateUserRoleDomainAssociationDto": {
      "required": [
        "domain",
        "newRole",
        "oldRole"
      ],
      "properties": {
        "oldRole": {
          "type": "string",
          "example": "cadastro_lider"
        },
        "newRole": {
          "type": "string",
          "example": "gerente_lider"
        },
        "domain": {
          "type": "string",
          "example": "administrativo"
        }
      }
    },
    "RoleDomainResourceActionAssociationDto": {
      "required": [
        "action",
        "domain",
        "resource",
        "role"
      ],
      "properties": {
        "role": {
          "type": "string",
          "example": "cadastro_lider"
        },
        "domain": {
          "type": "string",
          "example": "administrativo"
        },
        "resource": {
          "type": "string",
          "example": "cliente"
        },
        "action": {
          "type": "string",
          "example": "consultar"
        }
      }
    },
    "UpdateRoleDomainResourceActionAssociationDto": {
      "required": [
        "newAction",
        "newDomain",
        "newResource",
        "newRole",
        "oldAction",
        "oldDomain",
        "oldResource",
        "oldRole"
      ],
      "properties": {
        "oldRole": {
          "type": "string",
          "example": "cadastro_lider"
        },
        "oldDomain": {
          "type": "string",
          "example": "administrativo"
        },
        "oldResource": {
          "type": "string",
          "example": "cliente"
        },
        "oldAction": {
          "type": "string",
          "example": "editar"
        },
        "newRole": {
          "type": "string",
          "example": "cadastro_lider"
        },
        "newDomain": {
          "type": "string",
          "example": "administrativo"
        },
        "newResource": {
          "type": "string",
          "example": "cliente"
        },
        "newAction": {
          "type": "string",
          "example": "consultar"
        }
      }
    }
  }
}